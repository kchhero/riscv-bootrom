// See LICENSE for license details.

#ifndef _NEXELL_PLATFORM_H
#define _NEXELL_PLATFORM_H

#include "nx_const.h"
#include "nx_uart.h"

 // Some things missing from the official encoding.h
#if __riscv_xlen == 32
  #define MCAUSE_INT         0x80000000UL
  #define MCAUSE_CAUSE       0x7FFFFFFFUL
#else
   #define MCAUSE_INT         0x8000000000000000UL
   #define MCAUSE_CAUSE       0x7FFFFFFFFFFFFFFFUL
#endif

/****************************************************************************
 * Platform definitions
 *****************************************************************************/

// CPU info
#define GLOBAL_INT_SIZE 15
#define GLOBAL_INT_MAX_PRIORITY 7

// Memory map
#define DEBUG_CTRL_ADDR _AC(0x0,UL)
#define DEBUG_CTRL_SIZE _AC(0x1000,UL)  //#define DEBUG_CTRL_SIZE _AC(0x1000,UL)

#define ERROR_MEM_ADDR _AC(0x3000,UL)
#define ERROR_MEM_SIZE _AC(0x1000,UL)

#define MASKROM_MEM_ADDR _AC(0x10000,UL)
#define MASKROM_MEM_SIZE _AC(0x10000,UL)

#define CLINT_CTRL_ADDR _AC(0x2000000,UL)
#define CLINT_CTRL_SIZE _AC(0x10000,UL)

#define PLIC_CTRL_ADDR _AC(0xc000000,UL)
#define PLIC_CTRL_SIZE _AC(0x4000000,UL)

#define GPIO_CTRL_ADDR _AC(0x20700000,UL) //#define GPIO_CTRL_ADDR _AC(0x54002000,UL)
#define GPIO_CTRL_SIZE _AC(0x1000,UL)

#define UART_CTRL_ADDR _AC(0x208A0000,UL)  //#define UART_CTRL_ADDR _AC(0x54000000,UL)
#define UART_CTRL_SIZE _AC(0x1000,UL)

#define MEMORY_MEM_ADDR _AC(0x80000000,UL)
#define MEMORY_MEM_SIZE _AC(0x10000000,UL)


// Interrupt numbers
#define UART_INT_BASE 1
#define SPI_INT_BASE 2
#define GPIO_INT_BASE 3
#define AXI_PCIE_HOST_1_00_A_INT_BASE 7

// Helper functions
#define _REG64(p, i) (*(volatile uint64_t *)((p) + (i)))
#define _REG32(p, i) (*(volatile uint32_t *)((p) + (i)))
#define _REG16(p, i) (*(volatile uint16_t *)((p) + (i)))
// Bulk set bits in `reg` to either 0 or 1.
// E.g. SET_BITS(MY_REG, 0x00000007, 0) would generate MY_REG &= ~0x7
// E.g. SET_BITS(MY_REG, 0x00000007, 1) would generate MY_REG |= 0x7
#define SET_BITS(reg, mask, value) if ((value) == 0) { (reg) &= ~(mask); } else { (reg) |= (mask); }
#define CLINT_REG(offset) _REG32(CLINT_CTRL_ADDR, offset)
#define DEBUG_REG(offset) _REG32(DEBUG_CTRL_ADDR, offset)
#define ERROR_REG(offset) _REG32(ERROR_CTRL_ADDR, offset)
#define GPIO_REG(offset) _REG32(GPIO_CTRL_ADDR, offset)
#define MASKROM_REG(offset) _REG32(MASKROM_CTRL_ADDR, offset)
#define MEMORY_REG(offset) _REG32(MEMORY_CTRL_ADDR, offset)
#define PLIC_REG(offset) _REG32(PLIC_CTRL_ADDR, offset)
#define SPI_REG(offset) _REG32(SPI_CTRL_ADDR, offset)
#define UART_REG(offset) _REG32(UART_CTRL_ADDR, offset)
#define CLINT_REG64(offset) _REG64(CLINT_CTRL_ADDR, offset)
#define DEBUG_REG64(offset) _REG64(DEBUG_CTRL_ADDR, offset)
#define ERROR_REG64(offset) _REG64(ERROR_CTRL_ADDR, offset)
#define GPIO_REG64(offset) _REG64(GPIO_CTRL_ADDR, offset)
#define MASKROM_REG64(offset) _REG64(MASKROM_CTRL_ADDR, offset)
#define MEMORY_REG64(offset) _REG64(MEMORY_CTRL_ADDR, offset)
#define PLIC_REG64(offset) _REG64(PLIC_CTRL_ADDR, offset)
#define UART_REG64(offset) _REG64(UART_CTRL_ADDR, offset)

//--------------------------------------------------------------------------
//  Base Address
//--------------------------------------------------------------------------
#define PHY_BASEADDR_PLL0_MODULE 0x2000000
#define PHY_BASEADDR_PLL1_MODULE 0x20010000

#define PHY_BASEADDR_CMU_SYS_MODULE 0x20020000

#define PHY_BASEADDR_SYSREG_SYS_MODULE 0x20030000
#define PHY_BASEADDR_SYSREG_SYS_MODULE_APB  0x20040000

#define PHY_BASEADDR_SYS_CON0_MODULE_APB 0x20040000
#define PHY_BASEADDR_SYS_CON0_MODULE_NONSECURE 0x20050000

#define PHY_BASEADDR_DDRC0_MODULE 0x20070000

//--------------------------------------------------------------------------
#define PHY_BASEADDR_AXIM_DMA0_MODULE 0x20200000
#define PHY_BASEADDR_AXIM_DMA1_MODULE 0x20210000

#define PHY_BASEADDR_AXIM_CPU_SFR0_MODULE 0x20220000
#define PHY_BASEADDR_AXIM_CPU_MEM0_MODULE 0x20230000

#define PHY_BASEADDR_AXIM_VIP_MODULE 0x20240000
#define PHY_BASEADDR_AXIM_USB_MODULE 0x20250000
#define PHY_BASEADDR_AXIM_HOVER_MODULE 0x20260000
#define PHY_BASEADDR_AXIM_SCALER_MODULE 0x20270000
#define PHY_BASEADDR_AXIM_CODA960_MODULE 0x20280000

#define PHY_BASEADDR_AXIM_OSDMMC0_MODULE 0x20290000
#define PHY_BASEADDR_AXIM_SDMMC0_MODULE 0x202A0000

#define PHY_BASEADDR_DMA_DATA_BUS_CFG0_MODULE 0x20300000
#define PHY_BASEADDR_VIP_DATA_BUS_CFG0_MODULE 0x20310000

#define PHY_BASEADDR_CODA960_DATA_BUS_CFG_MODULE 0x20300000
#define PHY_BASEADDR_MAIN_BUS_CFG0_MODULE 0x20330000
#define PHY_BASEADDR_CFG_BUS_CFG0_MODULE 0x20340000

//--------------------------------------------------------------------------
#define PHY_BASEADDR_VIP_MODULE    0x20400000
#define PHY_BASEADDR_SCALER_MODULE 0x20410000
#define PHY_BASEADDR_CODA_MODULE   0x20420000
#define PHY_BASEADDR_RSP_MODULE    0x20430000
#define PHY_BASEADDR_CRYPTO_MODULE 0x20440000
#define PHY_BASEADDR_DMA0_MODULE   0x20450000
#define PHY_BASEADDR_DMA1_MODULE   0x20460000
#define PHY_BASEADDR_HOVER0_HOVER_MODULE   0x20470000
#define PHY_BASEADDR_HOVER0_DMA_MODULE     0x20480000

//--------------------------------------------------------------------------
#define PHY_BASEADDR_I2C0_MODULE 0x20600000
#define PHY_BASEADDR_I2C1_MODULE 0x20610000
#define PHY_BASEADDR_I2C2_MODULE 0x20620000
#define PHY_BASEADDR_I2C3_MODULE 0x20630000
#define PHY_BASEADDR_I2C4_MODULE 0x20640000
#define PHY_BASEADDR_I2C5_MODULE 0x20650000
#define PHY_BASEADDR_I2C6_MODULE 0x20660000
#define PHY_BASEADDR_I2C7_MODULE 0x20670000
#define PHY_BASEADDR_I2C8_MODULE 0x20680000
#define PHY_BASEADDR_I2C9_MODULE 0x20690000
#define PHY_BASEADDR_I2C10_MODULE 0x206A0000
#define PHY_BASEADDR_I2C11_MODULE 0x206B0000
    
#define PHY_BASEADDR_ADC_MODULE 0x206C0000
#define PHY_BASEADDR_WDT_MODULE 0x206D0000

#define PHY_BASEADDR_GPIO0_MODULE 0x20700000
#define PHY_BASEADDR_GPIO1_MODULE 0x20710000
#define PHY_BASEADDR_GPIO2_MODULE 0x20720000
#define PHY_BASEADDR_GPIO3_MODULE 0x20730000
#define PHY_BASEADDR_GPIO4_MODULE 0x20740000
#define PHY_BASEADDR_GPIO5_MODULE 0x20750000
#define PHY_BASEADDR_GPIO6_MODULE 0x20760000
#define PHY_BASEADDR_GPIO7_MODULE 0x20770000

//--------------------------------------------------------------------------
#define PHY_BASEADDR_SPI0_MODULE 0x20800000
#define PHY_BASEADDR_SPI1_MODULE 0x20810000
#define PHY_BASEADDR_SPI2_MODULE 0x20820000

#define PHY_BASEADDR_QSPI0_MODULE 0x20830000
#define PHY_BASEADDR_QSPI1_MODULE 0x20840000
#define PHY_BASEADDR_QSPI2_MODULE 0x20850000
#define PHY_BASEADDR_QSPI3_MODULE 0x20860000
#define PHY_BASEADDR_QSPI4_MODULE 0x20870000

#define PHY_BASEADDR_SPI0_MODULE 0x20800000
#define PHY_BASEADDR_SPI1_MODULE 0x20810000

#define PHY_BASEADDR_UART0_MODULE 0x20880000
#define PHY_BASEADDR_UART1_MODULE 0x20890000

#define PHY_BASEADDR_USART0_MODULE 0x208A000
#define PHY_BASEADDR_USART1_MODULE 0x208B000
#define PHY_BASEADDR_USART2_MODULE 0x208C000
#define PHY_BASEADDR_USART3_MODULE 0x208D000

#define PHY_BASEADDR_PWM0_MODULE 0x208E0000
#define PHY_BASEADDR_PWM1_MODULE 0x208F0000
#define PHY_BASEADDR_PWM2_MODULE 0x20900000

#define PHY_BASEADDR_TIMER0_MODULE 0x20910000
#define PHY_BASEADDR_TIMER1_MODULE 0x20920000

#define PHY_BASEADDR_OSDMMC0_MODULE 0x20930000
#define PHY_BASEADDR_SDMMC_CFG_MODULE 0x20940000

//--------------------------------------------------------------------------
#define PHY_BASEADDR_TRIKBOX0 0x20A0_0000
#define PHY_BASEADDR_TRIKBOX1 0x20A1_0000
#define PHY_BASEADDR_TRIKBOX2 0x20A2_0000
#define PHY_BASEADDR_TRIKBOX3 0x20A3_0000
#define PHY_BASEADDR_TRIKBOX4 0x20A4_0000
#define PHY_BASEADDR_TRIKBOX5 0x20A5_0000
#define PHY_BASEADDR_TRIKBOX6 0x20A6_0000
#define PHY_BASEADDR_TRIKBOX7 0x20A7_0000
#define PHY_BASEADDR_TRIKBOX8 0x20A8_0000
#define PHY_BASEADDR_TRIKBOX9 0x20A9_0000
#define PHY_BASEADDR_TRIKBOX10 0x20AA_0000
#define PHY_BASEADDR_TRIKBOX11 0x20AB_0000
#define PHY_BASEADDR_TRIKBOX12 0x20AC_0000
#define PHY_BASEADDR_TRIKBOX13 0x20AD_0000
#define PHY_BASEADDR_TRIKBOX14 0x20AE_0000
#define PHY_BASEADDR_TRIKBOX15 0x20AF_0000



#ifdef DEBUG
	#define NX_ASSERT(expr)    \
	{                          \
		if (!(expr))       \
                {                  \
			NX_TRACE((TEXT("%s(%d) : %s %s (%s)\n"),	\
				TEXT(__FILE__), __LINE__, __FUNCTION__, TEXT("ASSERT"), TEXT(#expr)));	\
			NX_DEBUG_BREAK();				\
		}	\
	}
#else
	#define NX_ASSERT(expr)
#endif // NX_DEBUG

#endif /* _NEXELL_PLATFORM_H */
